stages:
  - test
  - scan
  - build
  - terraform
  - deploy

variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  TF_ROOT: ${CI_PROJECT_DIR}/terraform
  TF_STATE_NAME: ${CI_PROJECT_PATH_SLUG}-${CI_ENVIRONMENT_NAME}
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  AWS_DEFAULT_REGION: us-west-2

# Lint HTML
html_lint:
  stage: test
  image: ghcr.io/djlint/djlint:latest
  script:
    - djlint src/*.html

# Security Scanning
sast:
  stage: scan
  include:
    - template: Security/SAST.gitlab-ci.yml

secret_detection:
  stage: scan
  include:
    - template: Security/Secret-Detection.gitlab-ci.yml

dependency_scanning:
  stage: scan
  include:
    - template: Security/Dependency-Scanning.gitlab-ci.yml

container_scanning:
  stage: scan
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  script:
    - docker build -t $DOCKER_IMAGE .
    - docker run --rm -v $PWD:/app aquasec/trivy image $DOCKER_IMAGE

# Build Docker image
build:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE

# Terraform Plan
terraform_plan:
  stage: terraform
  image: hashicorp/terraform:latest
  script:
    - cd ${TF_ROOT}/environments/${CI_ENVIRONMENT_NAME}
    - terraform init
    - terraform plan -out=plan.tfplan
  artifacts:
    paths:
      - ${TF_ROOT}/environments/${CI_ENVIRONMENT_NAME}/plan.tfplan
  rules:
    - if: $CI_MERGE_REQUEST_ID
      changes:
        - "terraform/**/*"
    - if: $CI_COMMIT_BRANCH == "main"

# Terraform Apply
terraform_apply:
  stage: terraform
  image: hashicorp/terraform:latest
  script:
    - cd ${TF_ROOT}/environments/${CI_ENVIRONMENT_NAME}
    - terraform init
    - terraform apply -auto-approve plan.tfplan
  dependencies:
    - terraform_plan
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  environment:
    name: ${CI_ENVIRONMENT_NAME}

# Deploy using Docker Compose
deploy:
  stage: deploy
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $DOCKER_IMAGE
    - docker-compose down || true
    - docker-compose up -d
  only:
    - main
