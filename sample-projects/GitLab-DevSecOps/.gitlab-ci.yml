stages:
  - test
  - containerize
  - terraform
  - deploy

variables:
  DOCKER_IMAGE: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/legacy-app:${CI_COMMIT_SHA}
  TF_ROOT: ${CI_PROJECT_DIR}/terraform
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  AWS_DEFAULT_REGION: us-west-2
  AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID}
  
  # Environment-specific variables
  DEV_TASK_CPU: "256"
  DEV_TASK_MEMORY: "512"
  PROD_TASK_CPU: "1024"
  PROD_TASK_MEMORY: "2048"

# Basic HTML Lint
lint:
  stage: test
  image: node:latest
  script:
    - npm install -g htmlhint
    - htmlhint src/*.html

# Basic Unit Tests
test:
  stage: test
  image: node:16-alpine
  script:
    - npm ci
    - npm run lint || true  # Don't fail for legacy code
    - npm test || true      # Don't fail for legacy code

# Application Testing
test_app:
  stage: test
  image: node:latest
  script:
    - npm install
    - npm run lint
    - npm test
  artifacts:
    reports:
      junit: junit.xml

# Build Docker image
build:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE

# Containerization
containerize:
  stage: containerize
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
  script:
    - docker build -t ${DOCKER_IMAGE} .
    - docker push ${DOCKER_IMAGE}
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json

# Security Scanning
security_scan:
  stage: security
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker pull $DOCKER_IMAGE
    - docker run --rm -v $PWD:/app aquasec/trivy image $DOCKER_IMAGE
    - npm audit

# Terraform Plan
terraform_plan:
  stage: terraform
  image: hashicorp/terraform:1.5
  script:
    - cd ${TF_ROOT}/environments/${CI_ENVIRONMENT_NAME}
    - terraform init
    - terraform plan -var="container_image=${DOCKER_IMAGE}" -out=plan.tfplan
  artifacts:
    paths:
      - ${TF_ROOT}/environments/${CI_ENVIRONMENT_NAME}/plan.tfplan
  environment:
    name: dev
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

# Terraform Apply
terraform_apply:
  stage: deploy
  image: hashicorp/terraform:1.5
  script:
    - cd ${TF_ROOT}/environments/${CI_ENVIRONMENT_NAME}
    - terraform init
    - terraform apply -auto-approve plan.tfplan
  environment:
    name: dev
  dependencies:
    - terraform_plan
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

# Infrastructure & Deploy
deploy:
  stage: deploy
  image: 
    name: hashicorp/terraform:latest
    entrypoint: [""]
  before_script:
    - cd ${TF_ROOT}/environments/${CI_ENVIRONMENT_NAME}
    - terraform init
  script:
    - terraform plan -out=plan.tfplan
    - terraform apply -auto-approve plan.tfplan
    - aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service ${ECS_SERVICE_NAME} --force-new-deployment
  environment:
    name: ${CI_ENVIRONMENT_NAME}
  only:
    - main
